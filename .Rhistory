summary(second_model)
third_model <- glm(stroke ~ age + hypertension + heart_disease +
avg_glucose_level + bmi, binomial, data = dataset)
summary(third_model)
dataset_cat <- dataset %>%
dplyr::mutate(
bmi_cat = dplyr::if_else(bmi < 16, "underweight",
dplyr::if_else(bmi >= 16 & bmi <= 25, "healthy",
dplyr::if_else(bmi > 16 & bmi <= 25, "overweight", "obese")
)
)
)
fourth_model <- glm(stroke ~ age + hypertension + heart_disease +
avg_glucose_level + bmi_cat, binomial, data = dataset_cat)
summary(fourth_model)
final_model <- glm(stroke ~ age + hypertension + heart_disease +
avg_glucose_level, binomial, data = dataset_cat)
summary(final_model)
MASS::stepAIC(full_model, direction="backward", data=dataset)
pred <- predict(final_model,type="response")
pred0.5 <- ifelse(pred<=0.95,0,1)
xtab <- table(pred0.5, stroke)
xtab
cm <- caret::confusionMatrix(xtab)
pred0.5
pred0.5 <- ifelse(pred<=0.5,0,1)
pred0.5
pred
max(pred)
pred0.5 <- ifelse(pred<=0.4,0,1)
xtab <- table(pred0.5, stroke)
xtab
cm <- caret::confusionMatrix(xtab)
cm
library(pROC)
pred <- predict(mod,type="response")
pred <- predict(final_model,type="response")
roc(low,pred)
roc(stroke,pred)
rocplot<-roc(stroke~pred, col = "red", plot=TRUE, print.auc=T, legacy.axes = T,
main = "ROC curve")
dataset %>% sample(., 3)
dataset[sample(nrow(dataset), 150)]
dataset[sample(nrow(dataset), 150),]
data_sample <- dataset[sample(nrow(dataset), 150),]
model_ <- glm(stroke ~ age + hypertension + heart_disease +
avg_glucose_level, binomial, data = data_sample)
summary(model_)
pchisq(model_$deviance, model_$df.residual, lower.tail = F)
model_ <- glm(stroke ~ age + hypertension + heart_disease, binomial, data = data_sample)
summary(model_)
pchisq(model_$deviance, model_$df.residual, lower.tail = F)
model_ <- glm(stroke ~  hypertension + heart_disease, binomial, data = data_sample)
summary(model_)
pchisq(model_$deviance, model_$df.residual, lower.tail = F)
model_ <- glm(stroke ~  hypertension, binomial, data = data_sample)
summary(model_)
pchisq(model_$deviance, model_$df.residual, lower.tail = F)
model_ <- glm(stroke ~  , binomial, data = data_sample)
summary(model_)
pchisq(model_$deviance, model_$df.residual, lower.tail = F)
model_$deviance
Anova(final_model)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyverse)
library(rmdformats)
library(DT)
library(MASS)
# importo il dataset
dataset <- readr::read_csv("./data/healthcare_data.csv")
dataset %>%
DT::datatable(options = list(
dom = 'Bfrtip',
pageLength = 5))
dplyr::glimpse(dataset)
dataset <- dataset %>%
dplyr::mutate(
age = as.integer(round(age, digits = 0)),
gender = as.factor(gender),
work_type = as.factor(work_type),
Residence_type = as.factor(Residence_type),
smoking_status = as.factor(smoking_status),
hypertension = as.factor(hypertension),
heart_disease = as.factor(heart_disease),
stroke = as.factor(stroke),
bmi = as.numeric(bmi),
ever_married = as.factor(dplyr::if_else(ever_married == "Yes", 1, 0))
) %>%
dplyr::filter(bmi != "N/A",
gender != "Other") %>%
dplyr::select(-id)
# definisco un modello che contiene tutte le variabili presenti nel dataset
attach(dataset)
full_model <- glm(stroke ~ ., binomial, data = dataset)
summary(full_model)
dataset %>%
dplyr::count(smoking_status) %>%
dplyr::mutate(percentage = paste0(round(n / sum(n), 3)* 100, "%")) %>%
DT::datatable()
first_model <- glm(stroke ~ gender + age + hypertension + heart_disease + ever_married + work_type +
avg_glucose_level + bmi, binomial, data = dataset)
summary(first_model)
second_model <- glm(stroke ~ gender + age + hypertension + heart_disease + ever_married +
avg_glucose_level + bmi, binomial, data = dataset)
summary(second_model)
third_model <- glm(stroke ~ age + hypertension + heart_disease +
avg_glucose_level + bmi, binomial, data = dataset)
summary(third_model)
dataset_cat <- dataset %>%
dplyr::mutate(
bmi_cat = dplyr::if_else(bmi < 16, "underweight",
dplyr::if_else(bmi >= 16 & bmi <= 25, "healthy",
dplyr::if_else(bmi > 16 & bmi <= 25, "overweight", "obese")
)
)
)
fourth_model <- glm(stroke ~ age + hypertension + heart_disease +
avg_glucose_level + bmi_cat, binomial, data = dataset_cat)
summary(fourth_model)
final_model <- glm(stroke ~ age + hypertension + heart_disease +
avg_glucose_level, binomial, data = dataset_cat)
summary(final_model)
MASS::stepAIC(full_model, direction="backward", data=dataset)
# confronto il modello finale con il modello saturo
library(caret)
pred <- predict(final_model,type="response")
pred0.5 <- ifelse(pred<=0.4,0,1)
xtab <- table(pred0.5, stroke)
cm <- caret::confusionMatrix(xtab)
cm
library(pROC)
pred <- predict(final_model,type="response")
roc(stroke,pred)
rocplot<-roc(stroke~pred, col = "red", plot=TRUE, print.auc=T, legacy.axes = T,
main = "ROC curve")
cm
pred <- predict(final_model,type="response")
pred0.5 <- ifelse(pred<=0.5,0,1)
xtab <- table(pred0.5, stroke)
xtab
pred0.5 <- ifelse(pred<=0.45,0,1)
xtab <- table(pred0.5, stroke)
xtab
xtab <- table(pred0.5, stroke)
cm <- caret::confusionMatrix(xtab)
cm
library(pROC)
pred <- predict(final_model,type="response")
roc(stroke,pred)
rocplot<-roc(stroke~pred, col = "red", plot=TRUE, print.auc=T, legacy.axes = T,
main = "ROC curve")
exp(cbind(coef(final_model), confint.default(final_model)))
exp(cbind(coef(final_model), confint.default(final_model))) %>% tibble
exp(cbind(coef(final_model), confint.default(final_model))) %>% tibble
exp(cbind(coef(final_model), confint.default(final_model))) %>% tibble
OR <- tibble(exp(cbind(coef(final_model), confint.default(final_model)))) %>%
dplyr::rename(
e_B = `.[,""]`,
lower = `[,"2.5 %"]`,
upper = `[,"97.5 %"]`
)
tibble(exp(cbind(coef(final_model), confint.default(final_model)))) %>% names()
OR <- tibble(exp(cbind(coef(final_model), confint.default(final_model))))
OR
OR
OR <- exp(cbind(coef(final_model), confint.default(final_model)))
OR
OR %>%
tibble::tibble()
O
OR
data.frame(OR) %>%
tibble::tibble()
data.frame
OR
data.frame(OR) %>%
tibble::tibble() %>%
dplyr::rename(coeff = V1)
data.frame(OR) %>%
tibble::tibble() %>%
dplyr::rename(coeff = V1,
lower = X2.5..)
data.frame(OR) %>%
tibble::tibble() %>%
dplyr::rename(coeff = V1,
lower = X2.5..,
upper = X97.5..)
dplyr::mutate(
Xj = c("age", "hypertension1", "heart_disease1", "avg_glucose_level")
)
data.frame(OR) %>%
tibble::tibble() %>%
dplyr::rename(coeff = V1,
lower = X2.5..,
upper = X97.5..) %>%
slice(-1) %>%
dplyr::mutate(
Xj = c("age", "hypertension1", "heart_disease1", "avg_glucose_level")
)
data.frame(OR) %>%
tibble::tibble() %>%
dplyr::mutate(
Xj = c("age", "hypertension1", "heart_disease1", "avg_glucose_level")
) %>%
dplyr::rename(coeff = V1,
lower = X2.5..,
upper = X97.5..) %>%
slice(-1)
data.frame(OR) %>%
tibble::tibble() %>%
dplyr::rename(coeff = V1,
lower = X2.5..,
upper = X97.5..) %>%
slice(-1) %>%
dplyr::mutate(
Xj = c("age", "hypertension1", "heart_disease1", "avg_glucose_level")
)
data.frame(OR) %>%
tibble::tibble() %>%
dplyr::rename(coeff = V1,
lower = X2.5..,
upper = X97.5..) %>%
slice(-1) %>%
dplyr::mutate(
Xj = c("age", "hypertension1", "heart_disease1", "avg_glucose_level")
) %>%
dplyr::relocate(Xj)
data.frame(OR) %>%
tibble::tibble() %>%
dplyr::rename(coeff = V1,
lower = X2.5..,
upper = X97.5..) %>%
slice(-1) %>%
dplyr::mutate(
Xj = c("age", "hypertension1", "heart_disease1", "avg_glucose_level")
) %>%
dplyr::relocate(Xj) %>%
dplyr::mutate(
perc_increment = (coeff - 1) * 100
)
pred <- predict(final_model,type="response")
pred0.45 <- ifelse(pred<=0.45,0,1)
xtab <- table(pred0.45, stroke)
cm <- caret::confusionMatrix(xtab)
cm
pred <- predict(final_model,type="response")
roc(stroke,pred)
rocplot<-roc(stroke~pred, col = "red", plot=TRUE, print.auc=T, legacy.axes = T,
main = "ROC curve")
exp(cbind(coef(final_model), confint.default(final_model)))
library(epiDisplay)
library(sjPlot)
logistic.display(mod)
logistic.display(final_model)
plot_model(mod, sort.est = TRUE)
exp(cbind(coef(final_model), confint.default(final_model)))
library(epiDisplay)
logistic.display(final_model)
library(sjPlot)
plot_model(final_model, sort.est = TRUE)
# tutte le probabilità stimate
pro<-fitted(final_model)
prob_stimate %>% head()
# analogamente
prob_stimate <- predict(final_model, type="response")
prob_stimate %>% head()
# tutte le probabilità stimate
pro <- fitted(final_model)
pro
dataset %>% str()
summary(dataset)
# probabilità stimata per un paziente sano
predict_paziente_sano <- data.frame(age = 25,
hypertension = 0,
heart_disease = 0,
avg_glucose_level = 100)
prob_paziente_sano <- predict(final_model, type="response", predict_paziente_sano)
str(dataset)
# probabilità stimata per un paziente sano
predict_paziente_sano <- data.frame(age = 25,
hypertension = as.factor("0"),
heart_disease = as.factor("0"),
avg_glucose_level = 100)
prob_paziente_sano <- predict(final_model, type="response", predict_paziente_sano)
prob_paziente_sano
summary(dataset)
predict_paziente_sano <- data.frame(age = 75,
hypertension = as.factor("1"),
heart_disease = as.factor("1"),
avg_glucose_level = 250)
predict_paziente_a_rischio <- data.frame(age = 75,
hypertension = as.factor("1"),
heart_disease = as.factor("1"),
avg_glucose_level = 250)
prob_paziente_a_rischio <- predict(final_model, type="response", predict_paziente_a_rischio)
prob_paziente_a_rischio
tibble(paziente = c("Sano", "A rischio"),
età = c(25, 75),
ipertensione = c("NO", "SI"),
malattie_cardiache = c("NO", "SI"),
avg_glucosio = c("100", "250"),
prob_stimate = c(prob_paziente_sano, prob_paziente_a_rischio))
tibble(paziente = c("Sano", "A rischio"),
età = c(25, 75),
ipertensione = c("NO", "SI"),
malattie_cardiache = c("NO", "SI"),
avg_glucosio = c("100", "250"),
prob_stimate = c(prob_paziente_sano, prob_paziente_a_rischio) * 100)
tibble(paziente = c("Sano", "A rischio"),
età = c(25, 75),
ipertensione = c("NO", "SI"),
malattie_cardiache = c("NO", "SI"),
avg_glucosio = c("100", "250"),
prob_stimate = c(prob_paziente_sano, prob_paziente_a_rischio) * 100) %>%
DT::datatable()
gather(dataset)
ggplot(gather(dataset), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
ggplot(gather(dataset), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~gender, scales = 'free_x')
ggplot(gather(dataset), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
ggplot(gather(dataset), aes(value, stat = "count")) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
ggplot(gather(dataset), aes(value)) +
geom_histogram(bins = 10, stat = "count") +
facet_wrap(~key, scales = 'free_x')
to_plot <- dataset %>%
dplyr::select(-c(age, hypertension, heart_disease))
ggplot(tidyr::gather(to_plot), aes(value)) +
geom_histogram(bins = 10, stat = "count") +
facet_wrap(~key, scales = 'free_x')
ggplot(tidyr::gather(to_plot), aes(value)) +
geom_histogram(bins = 10, stat = "count") +
facet_wrap(~key)
ggplot(tidyr::gather(to_plot), aes(value)) +
geom_histogram(bins = 10, stat = "count") +
facet_wrap(~key, scales = 'free_x')
%>%
to_plot <- dataset %>%
dplyr::select(-c(age, hypertension, heart_disease, avg_glucose_level, bmi))
to_plot
to_plot <- dataset %>%
dplyr::select(-c(age, hypertension, heart_disease, avg_glucose_level, bmi))
ggplot(tidyr::gather(to_plot), aes(value)) +
geom_histogram(bins = 10, stat = "count") +
facet_wrap(~key, scales = 'free_x')
ggplot(tidyr::gather(to_plot), aes(value)) +
geom_histogram(bins = 10, stat = "count") +
facet_wrap(~key, scales = 'free_x')+
coord_flip()
ggplot(tidyr::gather(to_plot), aes(value)) +
geom_histogram(bins = 10, stat = "count") +
facet_wrap(~key, scales = 'free_x')
ggplot(tidyr::gather(to_plot), aes(value)) +
geom_histogram(bins = 10, stat = "count") +
facet_wrap(~key, scales = 'free_x') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(tidyr::gather(to_plot), aes(value)) +
geom_histogram(bins = 10, stat = "count") +
facet_wrap(~key, scales = 'free_x') +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
90
ggplot(tidyr::gather(to_plot), aes(value)) +
geom_histogram(bins = 10, stat = "count") +
facet_wrap(~key, scales = 'free_x') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(tidyr::gather(to_plot), aes(value)) +
geom_density(bins = 10, stat = "count") +
facet_wrap(~key, scales = 'free_x') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(tidyr::gather(to_plot2), aes(value)) +
geom_density(bins = 10, stat = "count") +
facet_wrap(~key, scales = 'free_x') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
to_plot2 <- dataset %>%
dplyr::select(age, hypertension, heart_disease, avg_glucose_level, bmi)
ggplot(tidyr::gather(to_plot2), aes(value)) +
geom_density(bins = 10, stat = "count") +
facet_wrap(~key, scales = 'free_x') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(tidyr::gather(to_plot2), aes(value)) +
geom_histogram(bins = 10, stat = "count") +
facet_wrap(~key, scales = 'free_x') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(tidyr::gather(to_plot2), aes(value)) +
geom_histogram(bins = 10, stat = "count") +
facet_wrap(~key, scales = 'free_x') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
dataset %>%
dplyr::select(age, hypertension, heart_disease, avg_glucose_level, bmi)
et
ggplot(tidyr::gather(to_plot2), aes(value)) +
geom_histogram(bins = 10, stat = "count") +
facet_wrap(~key, scales = 'free_x') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
to_plot <- dataset %>%
dplyr::select(-c(age, avg_glucose_level, bmi))
ggplot(tidyr::gather(to_plot), aes(value)) +
geom_histogram(bins = 10, stat = "count") +
facet_wrap(~key, scales = 'free_x') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
to_plot2 <- dataset %>%
dplyr::select(hypertension, heart_disease)
ggplot(tidyr::gather(to_plot2), aes(value)) +
geom_hist(bins = 10, stat = "count") +
facet_wrap(~key, scales = 'free_x') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(tidyr::gather(to_plot2), aes(value)) +
geom_histogram(bins = 10, stat = "count") +
facet_wrap(~key, scales = 'free_x') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
to_plot2 <- dataset %>%
dplyr::select(age, avg_glucose_level, bmi)
ggplot(tidyr::gather(to_plot2), aes(value)) +
geom_hist(bins = 10) +
facet_wrap(~key, scales = 'free_x') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(tidyr::gather(to_plot2), aes(value)) +
geom_density() +
facet_wrap(~key, scales = 'free_x') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(tidyr::gather(to_plot2), aes(value)) +
geom_histogram() +
facet_wrap(~key, scales = 'free_x') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(tidyr::gather(to_plot), aes(value)) +
geom_histogram(bins = 10, stat = "count") +
facet_wrap(~key, scales = 'free_x')
ggplot(tidyr::gather(to_plot), aes(value)) +
geom_histogram(bins = 10, stat = "count") +
facet_wrap(~key, scales = 'free_x')
ggplot(tidyr::gather(to_plot), aes(value)) +
geom_histogram(bins = 10, stat = "count") +
facet_wrap(~key, scales = 'free_x') +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=1))
ggplot(tidyr::gather(to_plot), aes(value)) +
geom_histogram(bins = 10, stat = "count") +
facet_wrap(~key, scales = 'free_x') +
coord_flip()
ggplot(tidyr::gather(to_plot), aes(value)) +
geom_histogram(bins = 10, stat = "count") +
facet_wrap(~key, scales = 'free_x') +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=1))
ggplot(tidyr::gather(to_plot), aes(value)) +
geom_histogram(bins = 10, stat = "count") +
facet_wrap(~key, scales = 'free_x') +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=1))
ggplot(tidyr::gather(to_plot2), aes(value)) +
geom_histogram() +
facet_wrap(~key, scales = 'free_x') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```{r, warning=F, message=F}
ggplot(tidyr::gather(to_plot), aes(value)) +
geom_histogram(bins = 10, stat = "count") +
facet_wrap(~key, scales = 'free_x') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(tidyr::gather(to_plot), aes(value)) +
geom_histogram(bins = 10, stat = "count") +
facet_wrap(~key, scales = 'free_x') +
scale_x_discrete(label=function(x) abbreviate(x, minlength=7))
OR <- round(exp(cbind(coef(final_model), confint.default(final_model))),4)
OR
data.frame(OR) %>%
tibble::tibble() %>%
dplyr::rename(coeff = V1,
lower = X2.5..,
upper = X97.5..) %>%
slice(-1) %>%
dplyr::mutate(
Xj = c("age", "hypertension1", "heart_disease1", "avg_glucose_level")
) %>%
dplyr::relocate(Xj) %>%
dplyr::mutate(
perc_increment = (coeff - 1) * 100
) %>%
DT::datatable()
data.frame(OR) %>%
tibble::tibble() %>%
dplyr::rename(coeff = V1,
lower = X2.5..,
upper = X97.5..) %>%
slice(-1) %>%
dplyr::mutate(
Xj = c("age", "hypertension1", "heart_disease1", "avg_glucose_level")
) %>%
dplyr::relocate(Xj) %>%
dplyr::mutate(
perc_increment = round((coeff - 1) * 100,4)
) %>%
DT::datatable()
# tutte le probabilità stimate
pro <- fitted(final_model)
tibble(paziente = c("Sano", "A rischio"),
età = c(25, 75),
ipertensione = c("NO", "SI"),
malattie_cardiache = c("NO", "SI"),
avg_glucosio = c("100", "250"),
prob_stimate = c(prob_paziente_sano, prob_paziente_a_rischio) * 100) %>%
DT::datatable()
tibble(paziente = c("Sano", "A rischio"),
età = c(25, 75),
ipertensione = c("NO", "SI"),
malattie_cardiache = c("NO", "SI"),
avg_glucosio = c("100", "250"),
prob_stimate = round(c(prob_paziente_sano, prob_paziente_a_rischio) * 100),4) %>%
DT::datatable()
